import tensorflow as tf

norm = tf.random_uniform([1])
# Each time we run these ops, different results are generated
sess = tf.Session()
print(sess.run(norm))
print(sess.run(norm))

# Set an op-level seed to generate repeatable sequences across sessions.
norm = tf.random_normal([1], seed=1234)
sess = tf.Session()
print(sess.run(norm))
print(sess.run(norm))
sess = tf.Session()
print(sess.run(norm))
print(sess.run(norm))

# To make the random sequences generated by all ops be repeatable across sessions, set a graph-level seed:
tf.set_random_seed(1234)
norm = tf.random_normal([1])
uniform = tf.random_uniform([1])
sess = tf.Session()
print(sess.run(norm))
print(sess.run(norm))
print(sess.run(uniform))
print(sess.run(uniform))

sess = tf.Session()
print(sess.run(norm))
print(sess.run(norm))
print(sess.run(uniform))
print(sess.run(uniform))

augment = tf.random_uniform([1])
sess = tf.Session()
print(sess.run(augment))
a = tf.Variable(0, tf.int64)

y = tf.cond(tf.greater(tf.reshape(augment, []), 0.8), lambda: tf.add(a, 1), lambda: tf.add(a, -1))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    print(y.eval())

